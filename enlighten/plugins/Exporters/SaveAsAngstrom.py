import os
import logging
import datetime

from EnlightenPlugin import EnlightenPluginBase

log = logging.getLogger(__name__)

class SaveAsAngstrom(EnlightenPluginBase):
    """
    This writes received spectra into a custom folder with a different
    file format than ENLIGHTEN (specifically, wavelength in Ångstrom and
    ABSOLUTE wavenumber (as opposed to "Raman shift in wavenumbers").

    This is demonstrating how a plug-in can register for ENLIGHTEN events
    (in this case, "save").
    """

    def get_configuration(self):
        self.name = "Save As Å/cm⁻¹"
        self.streaming = False
        self.multi_device = True

        self.ctl.measurement_factory.register_observer(self.factory_callback)

        # e.g. C:\Users\mzieg\Documents\EnlightenSpectra\SaveAsAngstrom
        self.directory = os.path.join(self.ctl.save_options.get_directory(), "SaveAsAngstrom")
        if not os.path.exists(self.directory):
            os.makedirs(self.directory)

    def disconnect(self):
        self.ctl.measurement_factory.unregister_observer(self.factory_callback)
        super().disconnect()

    def factory_callback(self, measurement, event):
        """
        This callback receives new enlighten.Measurement objects generated by 
        MeasurementFactory.
        """

        if event != "save":
            return

        pr = measurement.processed_reading
        settings = measurement.spec.settings

        # deliberately use a slightly different naming nomenclature than ENLIGHTEN, 
        # because we can
        timestamp = datetime.datetime.now().strftime("%Y_%m_%d-%H_%M_%S")
        filename = f"{settings.eeprom.serial_number}-{timestamp}-angstrom.csv"
        pathname = os.path.join(self.directory, filename)

        with open(pathname, 'w', encoding="utf-8") as f:
            f.write('pixel, angstrom (A), absolute wavenumber (1/cm), intensity\n')
            for i in range(len(pr.processed)):
                nm = settings.wavelengths[i]
                angstrom = 10.0 * nm
                absolute_wavenumber = 1.0 / (nm / 1e7) # NOT Raman shift!
                f.write("%04d, %.5e, %.2f, %.3f\n" % (i, angstrom, absolute_wavenumber, pr.processed[i]))

        # write to the Marquee because we can
        self.ctl.marquee.info(f"SaveAsÅngstrom: saved {pathname}")
